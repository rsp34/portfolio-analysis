[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "portfolio-analysis",
    "section": "",
    "text": "from portfolio_analysis.portfolio import *\nfrom datetime import date\nThis file will become your README and also the index of your documentation."
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "portfolio-analysis",
    "section": "Install",
    "text": "Install\npip install portfolio_analysis"
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "portfolio-analysis",
    "section": "How to use",
    "text": "How to use\nLet’s explore a few different potential portfolios, recommended by various platform, to compared investment ideas assuming we started investing 5 years ago…\n\nmonthly_deposits = create_monthly_deposits(\"01/01/2018\",date.today().strftime(\"%d/%m/%Y\"),20000/12)\n\nand that we rebalance monthly for multi-asset portfolios.\n\nrebalance_dates = create_monthly_rebalance_dates(\"01/01/2018\",date.today().strftime(\"%d/%m/%Y\"))\n\nLet’s also see how an initial deposit of £250,000 would have faired. Then compare these to the performances of MoneyFarm and Nutmeg.\n\ninitial_deposit  = create_monthly_deposits(\"01/01/2018\",\"01/02/2018\",250000)\n\n\nVanguard Life Strategy 100%\nSources: https://uk.finance.yahoo.com/quote/0P0000TKZO.L?p=0P0000TKZO.L&.tsrc=fin-srch, https://www.vanguardinvestor.co.uk/what-we-offer/all-products\n\nvanguard_life_strategy = Holding('Vanguard LifeStrategy 100%','0P0000TKZO.L',0.22,monthly_deposits)\nvanguard_life_strategy.to_returns().profit()\n\n23933.89491594279\n\n\n\nvanguard_life_strategy = Holding('Vanguard LifeStrategy 100%','0P0000TKZO.L',0.22+0.15,initial_deposit)\nvanguard_life_strategy.to_returns().profit()\n\n107372.11443456807\n\n\n\n\nVanguard Global All Cap\nSources: https://finance.yahoo.com/quote/0P00018XAR.L?p=0P00018XAR.L&.tsrc=fin-srch, https://www.vanguardinvestor.co.uk/investments/vanguard-ftse-global-all-cap-index-fund-gbp-acc/overview\n\nvanguard_life_strategy = Holding('Vanguard FTSE Global All Cap Index Fund GBP Acc','0P00018XAR.L',0.23,monthly_deposits)\nvanguard_life_strategy.to_returns().profit()\n\n25024.61858661359\n\n\n\nvanguard_life_strategy = Holding('Vanguard FTSE Global All Cap Index Fund GBP Acc','0P00018XAR.L',0.23+0.15,initial_deposit)\nvanguard_life_strategy.to_returns().profit()\n\n120444.68172907135\n\n\n\n\nAJ Bell Ready-Made Portfolios\nSources:\n\naj_bell_adventurous = FixedAllocationPortfolio([\"abrdn Global Smaller Companies\",\n                                                \"Artemis Strategic Bond Acc\",# Different date?\n                                                \"Fidelity Global Special Sits Acc\",\n                                                \"Janus Henderson Absolute Return Acc\",\n                                                \"Jupiter UK Special Situations Acc\",\n                                                \"Ninety One UK Alpha Acc\",\n                                                \"Trojan Global Income Acc\"],# Different date?\n                                               [\"0P0000V4D1.L\",\n                                                \"0P00012OVS.L\",\n                                                \"0P0000WUT6.L\",\n                                                \"0P0001HG38.L\",\n                                                \"0P0000K9EK.L\",\n                                                \"0P00012K82.L\",\n                                                \"0P00012OVS.L\"],\n                                               [0.94,0.59,0.92,1.07,0.76,0.74,0.89],\n                                               [0.1,0.08,0.28,0.03,0.08,0.15,0.28],\n                                               monthly_deposits)\naj_bell_adventurous_rebalanced = aj_bell_adventurous.rebalance(rebalance_dates)\naj_bell_adventurous_rebalanced.to_returns().profit()\n\nnan\n\n\n\naj_bell_adventurous = FixedAllocationPortfolio([\"abrdn Global Smaller Companies\",\n                                                \"Artemis Strategic Bond Acc\",# Different date?\n                                                \"Fidelity Global Special Sits Acc\",\n                                                \"Janus Henderson Absolute Return Acc\",\n                                                \"Jupiter UK Special Situations Acc\",\n                                                \"Ninety One UK Alpha Acc\",\n                                                \"Trojan Global Income Acc\"],# Different date?\n                                               [\"0P0000V4D1.L\",\n                                                \"0P00012OVS.L\",\n                                                \"0P0000WUT6.L\",\n                                                \"0P0001HG38.L\",\n                                                \"0P0000K9EK.L\",\n                                                \"0P00012K82.L\",\n                                                \"0P00012OVS.L\"],\n                                               [0.94,0.59,0.92,1.07,0.76,0.74,0.89],\n                                               [0.1,0.08,0.28,0.03,0.08,0.15,0.28],\n                                               initial_deposit)\naj_bell_adventurous_rebalanced = aj_bell_adventurous.rebalance(rebalance_dates)\naj_bell_adventurous_rebalanced.to_returns().profit()\n\nnan\n\n\n\n\nInteractive-Investor Portfolios\n\nactive_growth = FixedAllocationPortfolio([\"Jupiter UK Special Situations Acc\",\n                                    \"Ninety One UK Alpha Acc\",\n                                    \"Scottish Mortgage Ord\",\n                                    \"Fidelity Global Dividend W Acc\",\n                                    \"Fundsmith Equity\",\n                                    \"F&C Investment Trust\",\n                                    \"Vanguard U.S. Equity\",\n                                    \"JPMorgan Emerging Markets\",\n                                    \"Capital Gearing Ord\",\n                                    \"LF Ruffer Diversified\",\n                                    \"abrdn Private Equity Opportunities\"],\n                                               [\"0P0000K9EK.L\",\n                                                \"0P00012K82.L\",\n                                                \"SMT.L\",\n                                                \"0P0000WUT3.L\",\n                                                \"0P0000RU81.L\",\n                                                \"FCIT.L\",\n                                                \"0P0000KSPA.L\",\n                                                \"JMG.L\",\n                                                \"CGT.L\",\n                                                \"0P0001MKQK.L\",\n                                                \"APEO.L\"],\n                                               [0.76,0.74,0.84,0.91,0.94,0.83,0.1,0.86,0.66,1.12,6.25],\n                                               [0.1 , 0.1,0.12, 0.1,0.13, 0.1,0.1,0.05,0.10,0.05,0.05],\n                                               monthly_deposits)\n\nactive_growth_rebalanced = active_growth.rebalance(rebalance_dates)\nactive_growth_rebalanced.to_returns().profit()\n\n/home/ryan/portfolio-analysis-timezone/portfolio_analysis/portfolio.py:58: UserWarning: Deposits predate initial date of 2021-09-01 00:00:00+01:00 where prices are available for LF Ruffer Diversified. First pricing data is back-filled.\n  warnings.warn(warn_msg)\n\n\n12905.323838299839\n\n\n\nactive_growth = FixedAllocationPortfolio([\"Jupiter UK Special Situations Acc\",\n                                    \"Ninety One UK Alpha Acc\",\n                                    \"Scottish Mortgage Ord\",\n                                    \"Fidelity Global Dividend W Acc\",\n                                    \"Fundsmith Equity\",\n                                    \"F&C Investment Trust\",\n                                    \"Vanguard U.S. Equity\",\n                                    \"JPMorgan Emerging Markets\",\n                                    \"Capital Gearing Ord\",\n                                    \"LF Ruffer Diversified\",\n                                    \"abrdn Private Equity Opportunities\"],\n                                               [\"0P0000K9EK.L\",\n                                                \"0P00012K82.L\",\n                                                \"SMT.L\",\n                                                \"0P0000WUT3.L\",\n                                                \"0P0000RU81.L\",\n                                                \"FCIT.L\",\n                                                \"0P0000KSPA.L\",\n                                                \"JMG.L\",\n                                                \"CGT.L\",\n                                                \"0P0001MKQK.L\",\n                                                \"APEO.L\"],\n                                               [0.76,0.74,0.84,0.91,0.94,0.83,0.1,0.86,0.66,1.12,6.25],\n                                               [0.1 , 0.1,0.12, 0.1,0.13, 0.1,0.1,0.05,0.10,0.05,0.05],\n                                               initial_deposit)\n\nactive_growth_rebalanced = active_growth.rebalance(rebalance_dates)\nactive_growth_rebalanced.to_returns().profit()\n\n/home/ryan/portfolio-analysis-timezone/portfolio_analysis/portfolio.py:58: UserWarning: Deposits predate initial date of 2021-09-01 00:00:00+01:00 where prices are available for LF Ruffer Diversified. First pricing data is back-filled.\n  warnings.warn(warn_msg)\n\n\n91056.05766314178\n\n\n\n\nInvest Engine Portfolios\n\n\nFidelity Portfolio Recommendations"
  },
  {
    "objectID": "portfolio.html",
    "href": "portfolio.html",
    "title": "portfolio",
    "section": "",
    "text": "A holding is an asset that can be bought. We need to track it’s value and how much of it we own over time. We therefore need financial data which can be provided by yfinance for free.\nLet’s import the package and have a play. Remembering that when we are using nbdev we have to have imports in their own cells.\n\nprice_history = yf.Ticker('VWELX').history(period='max', # valid periods: 1d,5d,1mo,3mo,6mo,1y,2y,5y,10y,ytd,max\n                                           interval='1d', # valid intervals: 1m,2m,5m,15m,30m,60m,90m,1h,1d,5d,1wk,1mo,3mo\n                                           actions=False)\nprice_history.head()\n\n\n\n\n\n\n\n\nOpen\nHigh\nLow\nClose\nVolume\n\n\nDate\n\n\n\n\n\n\n\n\n\n1980-01-02 00:00:00-05:00\n0.522507\n0.522507\n0.522507\n0.522507\n0\n\n\n1980-01-03 00:00:00-05:00\n0.520185\n0.520185\n0.520185\n0.520185\n0\n\n\n1980-01-04 00:00:00-05:00\n0.523088\n0.523088\n0.523088\n0.523088\n0\n\n\n1980-01-07 00:00:00-05:00\n0.523088\n0.523088\n0.523088\n0.523088\n0\n\n\n1980-01-08 00:00:00-05:00\n0.529474\n0.529474\n0.529474\n0.529474\n0\n\n\n\n\n\n\n\n\nprice_history.index[-1]\n\nTimestamp('2023-06-23 00:00:00-0400', tz='America/New_York')\n\n\nyfinance appears to be a good option as it has price information. One concern would be what units these are but that doesn’t matter as we will convert back to cash at the end.\n\n\n\n\n log_indent_decorator.&lt;locals&gt;.wrapper (*args, **kwargs)\n\nA useful check would be to see what the holding returns if a fund doesn’t exist.\n\nprice_history = yf.Ticker(\"cats\").history(period='max', # valid periods: 1d,5d,1mo,3mo,6mo,1y,2y,5y,10y,ytd,max\n                                                    interval='1d', # valid intervals: 1m,2m,5m,15m,30m,60m,90m,1h,1d,5d,1wk,1mo,3mo\n                                                    actions=False)\nprice_history.shape[0]\n\nCATS: No timezone found, symbol may be delisted\n\n\n0\n\n\n\n\n\nDeposits to our fund could be naturally specified as time series of deposits. A helper function is provided to support the creation of monthly deposits. It is important that these days lie on business days so we use pd.bdate_range However, this could be extended to different time periods.\n\nsource\n\n\n\n create_monthly_deposits (start:str, end:str, deposit:float)\n\n\n\n\n\nType\nDetails\n\n\n\n\nstart\nstr\nDate of the first montly deposit.\n\n\nend\nstr\nDate of the last monthly deposit\n\n\ndeposit\nfloat\nValue of monthly deposit\n\n\n\nWe call our function as follows.\n\nmonthly_deposits = create_monthly_deposits('01/01/2022','01/04/2023',10)\nmonthly_deposits\n\n2022-01-31 00:00:00+00:00    10\n2022-02-28 00:00:00+00:00    10\n2022-03-31 00:00:00+01:00    10\n2022-04-29 00:00:00+01:00    10\n2022-05-31 00:00:00+01:00    10\n2022-06-30 00:00:00+01:00    10\n2022-07-29 00:00:00+01:00    10\n2022-08-31 00:00:00+01:00    10\n2022-09-30 00:00:00+01:00    10\n2022-10-31 00:00:00+00:00    10\n2022-11-30 00:00:00+00:00    10\n2022-12-30 00:00:00+00:00    10\n2023-01-31 00:00:00+00:00    10\n2023-02-28 00:00:00+00:00    10\n2023-03-31 00:00:00+01:00    10\nFreq: BM, Name: deposits, dtype: int64\n\n\n\nmonthly_deposits = create_monthly_deposits('01/01/2022','01/04/2023',10)\nmonthly_deposits\n\n2022-01-31 00:00:00+00:00    10\n2022-02-28 00:00:00+00:00    10\n2022-03-31 00:00:00+01:00    10\n2022-04-29 00:00:00+01:00    10\n2022-05-31 00:00:00+01:00    10\n2022-06-30 00:00:00+01:00    10\n2022-07-29 00:00:00+01:00    10\n2022-08-31 00:00:00+01:00    10\n2022-09-30 00:00:00+01:00    10\n2022-10-31 00:00:00+00:00    10\n2022-11-30 00:00:00+00:00    10\n2022-12-30 00:00:00+00:00    10\n2023-01-31 00:00:00+00:00    10\n2023-02-28 00:00:00+00:00    10\n2023-03-31 00:00:00+01:00    10\nFreq: BM, Name: deposits, dtype: int64\n\n\n\n\n\n\nFirst we create a portfolio consisting of a single holding that takes a deposits argument. A main potential confusion here is if the deposits predate the commencement of the fund. Let’s see the oldest possible date available where we have prices for the Vanguard Life Strategy 100% fund.\n\nprice_history = yf.Ticker('0P0000TKZO.L').history(period='max', # valid periods: 1d,5d,1mo,3mo,6mo,1y,2y,5y,10y,ytd,max\n                                           interval='1d', # valid intervals: 1m,2m,5m,15m,30m,60m,90m,1h,1d,5d,1wk,1mo,3mo\n                                           actions=False)\nprice_history.head()\n\n\n\n\n\n\n\n\nOpen\nHigh\nLow\nClose\nVolume\n\n\nDate\n\n\n\n\n\n\n\n\n\n2018-01-02 00:00:00+00:00\n20677.300781\n20677.300781\n20677.300781\n20677.300781\n0\n\n\n2018-01-03 00:00:00+00:00\n20863.699219\n20863.699219\n20863.699219\n20863.699219\n0\n\n\n2018-01-04 00:00:00+00:00\n20965.300781\n20965.300781\n20965.300781\n20965.300781\n0\n\n\n2018-01-05 00:00:00+00:00\n21076.099609\n21076.099609\n21076.099609\n21076.099609\n0\n\n\n2018-01-08 00:00:00+00:00\n21060.300781\n21060.300781\n21060.300781\n21060.300781\n0\n\n\n\n\n\n\n\nLet’s create some deposits that predate these dates slightly. Try “GB00B4Q5X527.L” too.\n\nmonthly_deposits = create_monthly_deposits('01/01/2017','01/04/2023',10)\n\nWhat happens when we join these two tables?\n\nprice_history = pd.merge(monthly_deposits.to_frame(),price_history,left_index=True,right_index=True,how='outer')\nprice_history\n\n\n\n\n\n\n\n\ndeposits\nOpen\nHigh\nLow\nClose\nVolume\n\n\n\n\n2017-01-31 00:00:00+00:00\n10.0\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n2017-02-28 00:00:00+00:00\n10.0\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n2017-03-31 00:00:00+01:00\n10.0\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n2017-04-28 00:00:00+01:00\n10.0\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n2017-05-31 00:00:00+01:00\n10.0\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n...\n...\n...\n...\n...\n...\n...\n\n\n2023-06-16 00:00:00+01:00\nNaN\n30315.039062\n30315.039062\n30315.039062\n30315.039062\n0.0\n\n\n2023-06-19 00:00:00+01:00\nNaN\n30194.650391\n30194.650391\n30194.650391\n30194.650391\n0.0\n\n\n2023-06-20 00:00:00+01:00\nNaN\n30184.279297\n30184.279297\n30184.279297\n30184.279297\n0.0\n\n\n2023-06-21 00:00:00+01:00\nNaN\n30042.669922\n30042.669922\n30042.669922\n30042.669922\n0.0\n\n\n2023-06-22 00:00:00+01:00\nNaN\n30002.289062\n30002.289062\n30002.289062\n30002.289062\n0.0\n\n\n\n\n1396 rows × 6 columns\n\n\n\nHow do we want this to behave? * When we have a portfolio we are going to be combining funds that don’t start on the same dates. * We want funds to all have the same start date - achieved by using the same deposits input. * We fill the price_history with days. * We could save up all deposits until the first business day, but if we’ve back filled fund’s pricing i.e. the price is the same as when the fund opens for all preceding days, then we’ve effectively achieved this. We won’t see spikes in the deposits/fund value to see this but the final calculation will be the same and rebalancing will be easier. This also has the marginal downside that the fees are incorrect. I would prefer the user to just construct a portfolio with funds that have appropriate start dates than adding in lots of functionality for this edge case.\nLet’s start by infilling with days. This is also important to get the fees correct!\n\ndti = pd.date_range(start=price_history.index[0],end=price_history.index[-1])\nprice_history = price_history.reindex(dti)\n\n\nprice_history['deposits'] = price_history['deposits'].fillna(0)\nprice_history = price_history.fillna(method='bfill')\nprice_history\n\n\n\n\n\n\n\n\ndeposits\nOpen\nHigh\nLow\nClose\nVolume\n\n\n\n\n2017-01-31 00:00:00+00:00\n10.0\n20677.300781\n20677.300781\n20677.300781\n20677.300781\n0.0\n\n\n2017-02-01 00:00:00+00:00\n0.0\n20677.300781\n20677.300781\n20677.300781\n20677.300781\n0.0\n\n\n2017-02-02 00:00:00+00:00\n0.0\n20677.300781\n20677.300781\n20677.300781\n20677.300781\n0.0\n\n\n2017-02-03 00:00:00+00:00\n0.0\n20677.300781\n20677.300781\n20677.300781\n20677.300781\n0.0\n\n\n2017-02-04 00:00:00+00:00\n0.0\n20677.300781\n20677.300781\n20677.300781\n20677.300781\n0.0\n\n\n...\n...\n...\n...\n...\n...\n...\n\n\n2023-06-18 00:00:00+01:00\n0.0\n30194.650391\n30194.650391\n30194.650391\n30194.650391\n0.0\n\n\n2023-06-19 00:00:00+01:00\n0.0\n30194.650391\n30194.650391\n30194.650391\n30194.650391\n0.0\n\n\n2023-06-20 00:00:00+01:00\n0.0\n30184.279297\n30184.279297\n30184.279297\n30184.279297\n0.0\n\n\n2023-06-21 00:00:00+01:00\n0.0\n30042.669922\n30042.669922\n30042.669922\n30042.669922\n0.0\n\n\n2023-06-22 00:00:00+01:00\n0.0\n30002.289062\n30002.289062\n30002.289062\n30002.289062\n0.0\n\n\n\n\n2334 rows × 6 columns\n\n\n\n\nsource\n\n\n\n Holding (fund:str, ticker:str, product_cost:float, deposits)\n\nA holding for fund with data available on yfinance\n\n\n\n\nType\nDetails\n\n\n\n\nfund\nstr\nName of the fund\n\n\nticker\nstr\nTicker symbol for the stock\n\n\nproduct_cost\nfloat\nSum of all fees expressed as a percentage\n\n\ndeposits\n\nTimeseries dataframe of deposits\n\n\n\nLet’s create our first holding.\n\nsingle_holding = Holding('Vanguard LifeStrategy 100%','0P0000TKZO.L',0.22,create_monthly_deposits('04/01/2018','01/12/2022',1000))\n\nOur holding should have the fund name assigned.\n\nassert single_holding.fund == 'Vanguard LifeStrategy 100%'\n\nOur holding should have a history dataframe…\n\nassert isinstance(single_holding.history, pd.DataFrame)\n\nwith certain columns…\n\nassert all([item in single_holding.history.columns for item in ['Open','High','Low','Close','deposits','units','cum_units','cum_value','fees']])\n\nLet’s check the range of our holdings.\n\nsingle_holding.history.head()\n\n\n\n\n\n\n\n\ndeposits\nOpen\nHigh\nLow\nClose\nVolume\nunits\ncum_units\ncum_value\nfees\n\n\n\n\n2018-01-31 00:00:00+00:00\n1000.0\n20638.800781\n20638.800781\n20638.800781\n20638.800781\n0.0\n0.048452\n0.048452\n1000.000000\n0.006021\n\n\n2018-02-01 00:00:00+00:00\n0.0\n20603.599609\n20603.599609\n20603.599609\n20603.599609\n0.0\n0.000000\n0.048452\n998.294418\n0.006011\n\n\n2018-02-02 00:00:00+00:00\n0.0\n20399.000000\n20399.000000\n20399.000000\n20399.000000\n0.0\n0.000000\n0.048452\n988.381070\n0.005951\n\n\n2018-02-03 00:00:00+00:00\n0.0\n19985.199219\n19985.199219\n19985.199219\n19985.199219\n0.0\n0.000000\n0.048452\n968.331418\n0.005830\n\n\n2018-02-04 00:00:00+00:00\n0.0\n19985.199219\n19985.199219\n19985.199219\n19985.199219\n0.0\n0.000000\n0.048452\n968.331418\n0.005830\n\n\n\n\n\n\n\nand the later dates.\n\nsingle_holding.history.tail()\n\n\n\n\n\n\n\n\ndeposits\nOpen\nHigh\nLow\nClose\nVolume\nunits\ncum_units\ncum_value\nfees\n\n\n\n\n2023-06-20 00:00:00+01:00\n0.0\n30184.279297\n30184.279297\n30184.279297\n30184.279297\n0.0\n0.0\n2.456569\n74149.752530\n0.446440\n\n\n2023-06-21 00:00:00+01:00\n0.0\n30042.669922\n30042.669922\n30042.669922\n30042.669922\n0.0\n0.0\n2.456569\n73801.879387\n0.444346\n\n\n2023-06-22 00:00:00+01:00\n0.0\n30002.289062\n30002.289062\n30002.289062\n30002.289062\n0.0\n0.0\n2.456569\n73702.681036\n0.443749\n\n\n2023-06-23 00:00:00+01:00\n0.0\n30002.289062\n30002.289062\n30002.289062\n30002.289062\n0.0\n0.0\n2.456569\n73702.681036\n0.443749\n\n\n2023-06-24 00:00:00+01:00\n0.0\n30002.289062\n30002.289062\n30002.289062\n30002.289062\n0.0\n0.0\n2.456569\n73702.681036\n0.443749\n\n\n\n\n\n\n\nNow, let’s check we can define deposits before a fund starts.\n\ninitial_deposit  = create_monthly_deposits(\"01/01/2018\",\"01/02/2018\",250000)\nlf_ruffer_diversified = Holding(\"LF Ruffer Diversified\",\"0P0001MKQK.L\",1.12,initial_deposit)\n\n/tmp/ipykernel_1041/2452922105.py:28: UserWarning: Deposits predate initial date of 2021-09-01 00:00:00+01:00 where prices are available for LF Ruffer Diversified. First pricing data is back-filled.\n  warnings.warn(warn_msg)"
  },
  {
    "objectID": "portfolio.html#deposits",
    "href": "portfolio.html#deposits",
    "title": "portfolio",
    "section": "",
    "text": "Deposits to our fund could be naturally specified as time series of deposits. A helper function is provided to support the creation of monthly deposits. It is important that these days lie on business days so we use pd.bdate_range However, this could be extended to different time periods.\n\nsource\n\n\n\n create_monthly_deposits (start:str, end:str, deposit:float)\n\n\n\n\n\nType\nDetails\n\n\n\n\nstart\nstr\nDate of the first montly deposit.\n\n\nend\nstr\nDate of the last monthly deposit\n\n\ndeposit\nfloat\nValue of monthly deposit\n\n\n\nWe call our function as follows.\n\nmonthly_deposits = create_monthly_deposits('01/01/2022','01/04/2023',10)\nmonthly_deposits\n\n2022-01-31 00:00:00+00:00    10\n2022-02-28 00:00:00+00:00    10\n2022-03-31 00:00:00+01:00    10\n2022-04-29 00:00:00+01:00    10\n2022-05-31 00:00:00+01:00    10\n2022-06-30 00:00:00+01:00    10\n2022-07-29 00:00:00+01:00    10\n2022-08-31 00:00:00+01:00    10\n2022-09-30 00:00:00+01:00    10\n2022-10-31 00:00:00+00:00    10\n2022-11-30 00:00:00+00:00    10\n2022-12-30 00:00:00+00:00    10\n2023-01-31 00:00:00+00:00    10\n2023-02-28 00:00:00+00:00    10\n2023-03-31 00:00:00+01:00    10\nFreq: BM, Name: deposits, dtype: int64\n\n\n\nmonthly_deposits = create_monthly_deposits('01/01/2022','01/04/2023',10)\nmonthly_deposits\n\n2022-01-31 00:00:00+00:00    10\n2022-02-28 00:00:00+00:00    10\n2022-03-31 00:00:00+01:00    10\n2022-04-29 00:00:00+01:00    10\n2022-05-31 00:00:00+01:00    10\n2022-06-30 00:00:00+01:00    10\n2022-07-29 00:00:00+01:00    10\n2022-08-31 00:00:00+01:00    10\n2022-09-30 00:00:00+01:00    10\n2022-10-31 00:00:00+00:00    10\n2022-11-30 00:00:00+00:00    10\n2022-12-30 00:00:00+00:00    10\n2023-01-31 00:00:00+00:00    10\n2023-02-28 00:00:00+00:00    10\n2023-03-31 00:00:00+01:00    10\nFreq: BM, Name: deposits, dtype: int64"
  },
  {
    "objectID": "portfolio.html#single-holding",
    "href": "portfolio.html#single-holding",
    "title": "portfolio",
    "section": "",
    "text": "First we create a portfolio consisting of a single holding that takes a deposits argument. A main potential confusion here is if the deposits predate the commencement of the fund. Let’s see the oldest possible date available where we have prices for the Vanguard Life Strategy 100% fund.\n\nprice_history = yf.Ticker('0P0000TKZO.L').history(period='max', # valid periods: 1d,5d,1mo,3mo,6mo,1y,2y,5y,10y,ytd,max\n                                           interval='1d', # valid intervals: 1m,2m,5m,15m,30m,60m,90m,1h,1d,5d,1wk,1mo,3mo\n                                           actions=False)\nprice_history.head()\n\n\n\n\n\n\n\n\nOpen\nHigh\nLow\nClose\nVolume\n\n\nDate\n\n\n\n\n\n\n\n\n\n2018-01-02 00:00:00+00:00\n20677.300781\n20677.300781\n20677.300781\n20677.300781\n0\n\n\n2018-01-03 00:00:00+00:00\n20863.699219\n20863.699219\n20863.699219\n20863.699219\n0\n\n\n2018-01-04 00:00:00+00:00\n20965.300781\n20965.300781\n20965.300781\n20965.300781\n0\n\n\n2018-01-05 00:00:00+00:00\n21076.099609\n21076.099609\n21076.099609\n21076.099609\n0\n\n\n2018-01-08 00:00:00+00:00\n21060.300781\n21060.300781\n21060.300781\n21060.300781\n0\n\n\n\n\n\n\n\nLet’s create some deposits that predate these dates slightly. Try “GB00B4Q5X527.L” too.\n\nmonthly_deposits = create_monthly_deposits('01/01/2017','01/04/2023',10)\n\nWhat happens when we join these two tables?\n\nprice_history = pd.merge(monthly_deposits.to_frame(),price_history,left_index=True,right_index=True,how='outer')\nprice_history\n\n\n\n\n\n\n\n\ndeposits\nOpen\nHigh\nLow\nClose\nVolume\n\n\n\n\n2017-01-31 00:00:00+00:00\n10.0\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n2017-02-28 00:00:00+00:00\n10.0\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n2017-03-31 00:00:00+01:00\n10.0\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n2017-04-28 00:00:00+01:00\n10.0\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n2017-05-31 00:00:00+01:00\n10.0\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n...\n...\n...\n...\n...\n...\n...\n\n\n2023-06-16 00:00:00+01:00\nNaN\n30315.039062\n30315.039062\n30315.039062\n30315.039062\n0.0\n\n\n2023-06-19 00:00:00+01:00\nNaN\n30194.650391\n30194.650391\n30194.650391\n30194.650391\n0.0\n\n\n2023-06-20 00:00:00+01:00\nNaN\n30184.279297\n30184.279297\n30184.279297\n30184.279297\n0.0\n\n\n2023-06-21 00:00:00+01:00\nNaN\n30042.669922\n30042.669922\n30042.669922\n30042.669922\n0.0\n\n\n2023-06-22 00:00:00+01:00\nNaN\n30002.289062\n30002.289062\n30002.289062\n30002.289062\n0.0\n\n\n\n\n1396 rows × 6 columns\n\n\n\nHow do we want this to behave? * When we have a portfolio we are going to be combining funds that don’t start on the same dates. * We want funds to all have the same start date - achieved by using the same deposits input. * We fill the price_history with days. * We could save up all deposits until the first business day, but if we’ve back filled fund’s pricing i.e. the price is the same as when the fund opens for all preceding days, then we’ve effectively achieved this. We won’t see spikes in the deposits/fund value to see this but the final calculation will be the same and rebalancing will be easier. This also has the marginal downside that the fees are incorrect. I would prefer the user to just construct a portfolio with funds that have appropriate start dates than adding in lots of functionality for this edge case.\nLet’s start by infilling with days. This is also important to get the fees correct!\n\ndti = pd.date_range(start=price_history.index[0],end=price_history.index[-1])\nprice_history = price_history.reindex(dti)\n\n\nprice_history['deposits'] = price_history['deposits'].fillna(0)\nprice_history = price_history.fillna(method='bfill')\nprice_history\n\n\n\n\n\n\n\n\ndeposits\nOpen\nHigh\nLow\nClose\nVolume\n\n\n\n\n2017-01-31 00:00:00+00:00\n10.0\n20677.300781\n20677.300781\n20677.300781\n20677.300781\n0.0\n\n\n2017-02-01 00:00:00+00:00\n0.0\n20677.300781\n20677.300781\n20677.300781\n20677.300781\n0.0\n\n\n2017-02-02 00:00:00+00:00\n0.0\n20677.300781\n20677.300781\n20677.300781\n20677.300781\n0.0\n\n\n2017-02-03 00:00:00+00:00\n0.0\n20677.300781\n20677.300781\n20677.300781\n20677.300781\n0.0\n\n\n2017-02-04 00:00:00+00:00\n0.0\n20677.300781\n20677.300781\n20677.300781\n20677.300781\n0.0\n\n\n...\n...\n...\n...\n...\n...\n...\n\n\n2023-06-18 00:00:00+01:00\n0.0\n30194.650391\n30194.650391\n30194.650391\n30194.650391\n0.0\n\n\n2023-06-19 00:00:00+01:00\n0.0\n30194.650391\n30194.650391\n30194.650391\n30194.650391\n0.0\n\n\n2023-06-20 00:00:00+01:00\n0.0\n30184.279297\n30184.279297\n30184.279297\n30184.279297\n0.0\n\n\n2023-06-21 00:00:00+01:00\n0.0\n30042.669922\n30042.669922\n30042.669922\n30042.669922\n0.0\n\n\n2023-06-22 00:00:00+01:00\n0.0\n30002.289062\n30002.289062\n30002.289062\n30002.289062\n0.0\n\n\n\n\n2334 rows × 6 columns\n\n\n\n\nsource\n\n\n\n Holding (fund:str, ticker:str, product_cost:float, deposits)\n\nA holding for fund with data available on yfinance\n\n\n\n\nType\nDetails\n\n\n\n\nfund\nstr\nName of the fund\n\n\nticker\nstr\nTicker symbol for the stock\n\n\nproduct_cost\nfloat\nSum of all fees expressed as a percentage\n\n\ndeposits\n\nTimeseries dataframe of deposits\n\n\n\nLet’s create our first holding.\n\nsingle_holding = Holding('Vanguard LifeStrategy 100%','0P0000TKZO.L',0.22,create_monthly_deposits('04/01/2018','01/12/2022',1000))\n\nOur holding should have the fund name assigned.\n\nassert single_holding.fund == 'Vanguard LifeStrategy 100%'\n\nOur holding should have a history dataframe…\n\nassert isinstance(single_holding.history, pd.DataFrame)\n\nwith certain columns…\n\nassert all([item in single_holding.history.columns for item in ['Open','High','Low','Close','deposits','units','cum_units','cum_value','fees']])\n\nLet’s check the range of our holdings.\n\nsingle_holding.history.head()\n\n\n\n\n\n\n\n\ndeposits\nOpen\nHigh\nLow\nClose\nVolume\nunits\ncum_units\ncum_value\nfees\n\n\n\n\n2018-01-31 00:00:00+00:00\n1000.0\n20638.800781\n20638.800781\n20638.800781\n20638.800781\n0.0\n0.048452\n0.048452\n1000.000000\n0.006021\n\n\n2018-02-01 00:00:00+00:00\n0.0\n20603.599609\n20603.599609\n20603.599609\n20603.599609\n0.0\n0.000000\n0.048452\n998.294418\n0.006011\n\n\n2018-02-02 00:00:00+00:00\n0.0\n20399.000000\n20399.000000\n20399.000000\n20399.000000\n0.0\n0.000000\n0.048452\n988.381070\n0.005951\n\n\n2018-02-03 00:00:00+00:00\n0.0\n19985.199219\n19985.199219\n19985.199219\n19985.199219\n0.0\n0.000000\n0.048452\n968.331418\n0.005830\n\n\n2018-02-04 00:00:00+00:00\n0.0\n19985.199219\n19985.199219\n19985.199219\n19985.199219\n0.0\n0.000000\n0.048452\n968.331418\n0.005830\n\n\n\n\n\n\n\nand the later dates.\n\nsingle_holding.history.tail()\n\n\n\n\n\n\n\n\ndeposits\nOpen\nHigh\nLow\nClose\nVolume\nunits\ncum_units\ncum_value\nfees\n\n\n\n\n2023-06-20 00:00:00+01:00\n0.0\n30184.279297\n30184.279297\n30184.279297\n30184.279297\n0.0\n0.0\n2.456569\n74149.752530\n0.446440\n\n\n2023-06-21 00:00:00+01:00\n0.0\n30042.669922\n30042.669922\n30042.669922\n30042.669922\n0.0\n0.0\n2.456569\n73801.879387\n0.444346\n\n\n2023-06-22 00:00:00+01:00\n0.0\n30002.289062\n30002.289062\n30002.289062\n30002.289062\n0.0\n0.0\n2.456569\n73702.681036\n0.443749\n\n\n2023-06-23 00:00:00+01:00\n0.0\n30002.289062\n30002.289062\n30002.289062\n30002.289062\n0.0\n0.0\n2.456569\n73702.681036\n0.443749\n\n\n2023-06-24 00:00:00+01:00\n0.0\n30002.289062\n30002.289062\n30002.289062\n30002.289062\n0.0\n0.0\n2.456569\n73702.681036\n0.443749\n\n\n\n\n\n\n\nNow, let’s check we can define deposits before a fund starts.\n\ninitial_deposit  = create_monthly_deposits(\"01/01/2018\",\"01/02/2018\",250000)\nlf_ruffer_diversified = Holding(\"LF Ruffer Diversified\",\"0P0001MKQK.L\",1.12,initial_deposit)\n\n/tmp/ipykernel_1041/2452922105.py:28: UserWarning: Deposits predate initial date of 2021-09-01 00:00:00+01:00 where prices are available for LF Ruffer Diversified. First pricing data is back-filled.\n  warnings.warn(warn_msg)"
  }
]